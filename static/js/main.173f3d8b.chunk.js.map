{"version":3,"sources":["components/Monday/Message/Message.module.css","components/Monday/MyName/MyName.module.css","images/avatar1.jpg","components/Monday/Monday.module.css","components/Monday/MyName/MyName.tsx","components/Monday/Message/Message.tsx","components/Monday/Monday.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","MyName","props","className","styles","myName","name","Message","message","src","avatar1","alt","commentBubble","userName","helloVisitor","time","timeAdded","Monday","zeroFirstFormat","value","useState","date","Date","getHours","getMinutes","getTime","mainContainer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"sFACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,cAAgB,+BAA+B,SAAW,0BAA0B,aAAe,8BAA8B,KAAO,wB,kBCA7LD,EAAOC,QAAU,CAAC,OAAS,yB,gBCD3BD,EAAOC,QAAU,IAA0B,qC,gBCC3CD,EAAOC,QAAU,CAAC,cAAgB,gC,uLCYnBC,MANf,SAAgBC,GACZ,OACI,yBAAKC,UAAWC,IAAOC,QAASH,EAAMI,O,gCCe/BC,MAff,SAAiBL,GACf,OACI,yBAAKC,UAAWC,IAAOI,SACnB,yBAAKC,IAAKC,IAASC,IAAI,WACvB,yBAAKR,UAAWC,IAAOQ,eACnB,yBAAKT,UAAWC,IAAOS,UAAWX,EAAMI,MACxC,yBAAKH,UAAWC,IAAOU,cAAvB,gBAGA,yBAAKX,UAAWC,IAAOW,MAAOb,EAAMc,c,gBCiBnCC,MA9Bf,WACA,SAASC,EAAiBC,GAItB,OAHIA,EAAQ,KACRA,EAAQ,IAAMA,GAEXA,EALO,MAacC,mBALhC,WACI,IAAIC,EAAO,IAAIC,KACf,MAAM,GAAN,OAAUJ,EAAgBG,EAAKE,YAA/B,YAA8CL,EAAgBG,EAAKG,eAG9BC,IAbvB,mBAabT,EAba,KAmBhB,OAnBgB,KAoBd,yBAAKb,UAAWC,IAAOsB,eACnB,kBAAC,EAAD,CAAQpB,KAAK,uCACb,kBAAC,EAAD,CACIA,KAAK,UACLU,UAAWA,MCjBRW,MARf,WACE,OACE,yBAAKxB,UAAU,OACd,kBAAC,EAAD,QCKeyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMrC,c","file":"static/js/main.173f3d8b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__1oye5\",\"commentBubble\":\"Message_commentBubble__3VmqJ\",\"userName\":\"Message_userName__31smT\",\"helloVisitor\":\"Message_helloVisitor__3gKMD\",\"time\":\"Message_time__3-ANu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myName\":\"MyName_myName__1mgL_\"};","module.exports = __webpack_public_path__ + \"static/media/avatar1.1a286469.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainContainer\":\"Monday_mainContainer__3g18H\"};","import React from \"react\";\r\nimport styles from \"./MyName.module.css\";\r\n\r\ntype PropsType = {\r\n    name: string\r\n}\r\n\r\nfunction MyName(props: PropsType) {\r\n    return (\r\n        <div className={styles.myName}>{props.name}</div>\r\n    );\r\n}\r\n\r\nexport default MyName;","import React from 'react';\nimport styles from './Message.module.css'\nimport avatar1 from \"../../../images/avatar1.jpg\"\n\ntype PropsType = {\n    name: string\n    timeAdded: any\n}\n\nfunction Message(props: PropsType) {\n  return (\n      <div className={styles.message}>\n          <img src={avatar1} alt=\"avatar\"/>\n          <div className={styles.commentBubble}>\n              <div className={styles.userName}>{props.name}</div>\n              <div className={styles.helloVisitor}>\n                  some message\n              </div>\n              <div className={styles.time}>{props.timeAdded}</div>\n          </div>\n      </div>\n  );\n}\n\nexport default Message;\n\n\n\n/*\n- создать компоненту, которая красиво будет выводить ваше ФИО (попрактикуйте пропсы!!! (<Message name=\"x\" text=\"y\"/>), их типизацию и module.css)\n- *** создать компоненту, которая будет выводить текст,  стилизованно как в телеграмме (имя, текст, время, уголок (загуглить/украсть с другого сайта/у друга))\n- нужно типизировать пропсы сразу, any - крайне нежелателен даже вначале, если не знаете как - пишем мне или на хэлп*/\n","import React, {useState} from 'react';\nimport MyName from \"./MyName/MyName\";\nimport Message from \"./Message/Message\";\nimport styles from './Monday.module.css'\n\nfunction Monday() {\nfunction zeroFirstFormat (value: any) {\n    if (value < 10) {\n        value = \"0\" + value;\n    }\n    return value;\n}\n\nfunction getTime () {\n    let date = new Date();\n    return `${zeroFirstFormat(date.getHours())}:${zeroFirstFormat(date.getMinutes())}`\n}\n\nlet [timeAdded, setTimeAdded] = useState(getTime())\n\n/*function changeTimeAdded(value: {() => time()}) {\n    setTimeAdded(value)\n}*/\n\n  return (\n    <div className={styles.mainContainer}>\n        <MyName name=\"Biryukov Saveliy-Georgiy Yurievich\"/>\n        <Message\n            name=\"Saveliy\"\n            timeAdded={timeAdded}\n        />\n    </div>\n  );\n}\n\nexport default Monday;\n","import React from 'react';\nimport './App.css';\nimport Monday from \"./components/Monday/Monday\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <Monday/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}