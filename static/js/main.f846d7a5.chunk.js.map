{"version":3,"sources":["components/Monday/Visitors/HelloVisitor/HelloVisitor.module.css","components/Tuesday/TodoListTasks/TodoListTask/TodoListTask.module.css","components/Tuesday/TodoListHeader/TodoListHeader.module.css","components/Navbar/Navlink/NavLink.module.css","components/Monday/MyName/MyName.module.css","components/Monday/Monday.module.css","components/Monday/Visitors/Visitors.module.css","images/avatar1.jpg","components/Monday/Visitors/AllVisitors/AllVisitors.module.css","components/Monday/Visitors/InputVisitorName/InputVisitorName.module.css","components/Tuesday/Tuesday.module.css","components/Tuesday/TodoListTasks/TodoListTasks.module.css","components/Tuesday/TodoListFooter/TodoListFooter.module.css","components/Navbar/Navbar.module.css","components/Monday/MyName/MyName.tsx","components/Monday/Visitors/HelloVisitor/HelloVisitor.tsx","components/Monday/Visitors/AllVisitors/AllVisitors.tsx","components/Monday/Visitors/InputVisitorName/InputVisitorName.tsx","components/Monday/Visitors/Visitors.tsx","components/Monday/Monday.tsx","components/Tuesday/TodoListHeader/TodoListHeader.tsx","components/Tuesday/TodoListTasks/TodoListTask/TodoListTask.tsx","components/Tuesday/TodoListTasks/TodoListTasks.tsx","components/Tuesday/TodoListFooter/TodoListFooter.tsx","components/Tuesday/Tuesday.tsx","components/Navbar/Navlink/NavLink.tsx","components/Navbar/Navbar.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","MyName","props","className","styles","myName","name","HelloVisitor","message","src","avatar1","alt","commentBubble","userName","helloVisitor","title","time","timeAdded","AllVisitors","displayVisitors","visitors","map","v","InputVisitorName","type","value","onChange","onChangeHandler","onKeyPress","onKeyPressHandler","placeholder","inputVisitorName","Visitors","useState","setVisitors","setTitle","zeroFirstFormat","getTime","date","Date","getHours","getMinutes","setTimeAdded","addVisitor","newVisitors","id","v1","e","charCode","currentTarget","onClick","length","Monday","mainContainer","TodoListHeader","isDisabled","setIsDisabled","error","setError","onAddTaskClick","newTitle","addTask","inputClassname","inputText","todoListHeaderTitle","todoListNewTaskForm","key","disabled","TodoListTask","editMode","setEditMode","todoListTask","task","isDone","done","taskWrap","checked","autoFocus","onBlur","wordWrap","selector","deleteButton","onMouseDown","deleteTask","TodoListTasks","tasksElements","tasks","index","TodoListFooter","isHidden","setIsHidden","todoListFooter","changeFilter","Tuesday","priority","setTasks","filterValue","setFilterValue","taskId","tasksForTodolist","filter","t","todoList","newText","newTask","newTasks","removedId","Navlink","item","to","dayOfWeek","link","activeClassName","activeLink","Navbar","setActiveLink","activateLink","textContent","NavLinks","daysOfWeek","nav","App","style","path","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.f846d7a5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"HelloVisitor_message__Q48rH\",\"commentBubble\":\"HelloVisitor_commentBubble__7Xdcb\",\"userName\":\"HelloVisitor_userName__2YUqP\",\"helloVisitor\":\"HelloVisitor_helloVisitor__1njQy\",\"time\":\"HelloVisitor_time__1yv1Q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoListTask\":\"TodoListTask_todoListTask__1Y7NU\",\"done\":\"TodoListTask_done__251hI\",\"taskWrap\":\"TodoListTask_taskWrap__3bhTJ\",\"wordWrap\":\"TodoListTask_wordWrap__2c8gq\",\"selector\":\"TodoListTask_selector__Wff_O\",\"deleteButton\":\"TodoListTask_deleteButton__1bafv\",\"taskTime\":\"TodoListTask_taskTime__1ZUSA\",\"displayBlockNone\":\"TodoListTask_displayBlockNone__7twbj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TodoListHeader\":\"TodoListHeader_TodoListHeader__2-zJQ\",\"todoListHeaderTitle\":\"TodoListHeader_todoListHeaderTitle__2MMjO\",\"todoListNewTaskForm\":\"TodoListHeader_todoListNewTaskForm__gJ6Nw\",\"todoList\":\"TodoListHeader_todoList__fEmhg\",\"todoListTask\":\"TodoListHeader_todoListTask__U_Vlt\",\"error\":\"TodoListHeader_error__3arFn\",\"inputText\":\"TodoListHeader_inputText__6OGgF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"NavLink_nav__25y2c\",\"item\":\"NavLink_item__2CfjE\",\"activeLink\":\"NavLink_activeLink__1PdyU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myName\":\"MyName_myName__1mgL_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainContainer\":\"Monday_mainContainer__3g18H\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Visitors_message__22XDb\",\"commentBubble\":\"Visitors_commentBubble__2Iu9I\",\"userName\":\"Visitors_userName__3_aOK\",\"helloVisitor\":\"Visitors_helloVisitor__vd9kz\",\"time\":\"Visitors_time__xu8NW\"};","module.exports = __webpack_public_path__ + \"static/media/avatar1.1a286469.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"displayVisitors\":\"AllVisitors_displayVisitors__2SyKn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputVisitorName\":\"InputVisitorName_inputVisitorName__1Uw9i\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tuesday\":\"Tuesday_tuesday__1LDes\",\"todoList\":\"Tuesday_todoList__1C1g2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoListTask\":\"TodoListTasks_todoListTask__9x8kl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoListFooter\":\"TodoListFooter_todoListFooter__yAUIz\",\"filter-active\":\"TodoListFooter_filter-active__2Utld\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__1nP-r\",\"item\":\"Navbar_item__3eTov\",\"activeLink\":\"Navbar_activeLink__2Iy_l\"};","import React from \"react\";\r\nimport styles from \"./MyName.module.css\";\r\n\r\ntype PropsType = {\r\n    name: string\r\n}\r\n\r\nfunction MyName(props: PropsType) {\r\n    return (\r\n        <div className={styles.myName}>{props.name}</div>\r\n    );\r\n}\r\n\r\nexport default MyName;","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport styles from \"./HelloVisitor.module.css\";\r\nimport avatar1 from \"../../../../images/avatar1.jpg\";\r\n\r\n/*type PropsType = {\r\n    addVisitor: (title: string) => void\r\n}*/\r\n\r\ntype PropsType = {\r\n    title: string\r\n    name: string\r\n    timeAdded: any\r\n}\r\nconst HelloVisitor = (props: PropsType) => {\r\n    //if(props.title) {\r\n    return (\r\n            <div className={styles.myName}>\r\n                <div className={styles.message}>\r\n                    <img src={avatar1} alt=\"avatar\"/>\r\n                    <div className={styles.commentBubble}>\r\n                        <div className={styles.userName}>{props.name}</div>\r\n                        <div className={styles.helloVisitor}>\r\n                            {props.title}\r\n                        </div>\r\n                        <div className={styles.time}>{props.timeAdded}</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            )\r\n    //}\r\n   // return null\r\n}\r\n\r\nexport default HelloVisitor;","import React from 'react';\r\nimport styles from \"./AllVisitors.module.css\";\r\n\r\n\r\ntype visitorsType = {\r\n    id: string\r\n    title: string\r\n}\r\n\r\ntype PropsType = {\r\n    visitors: Array<visitorsType>\r\n}\r\n\r\nconst AllVisitors = (props: PropsType) => {\r\n\r\n    return (\r\n        <div className={styles.displayVisitors}>\r\n            {\r\n            props.visitors.map(v => {\r\n            return (\r\n                <div>\r\n                   {v.title}\r\n                </div>\r\n            );\r\n        })\r\n            }\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default AllVisitors;","import React, {ChangeEvent, KeyboardEvent} from 'react';\r\nimport styles from \"./InputVisitorName.module.css\";\r\n\r\ntype PropsType = {\r\n    title: string\r\n    onKeyPressHandler: (e: KeyboardEvent<HTMLInputElement>) => void\r\n    onChangeHandler: (e:  ChangeEvent<HTMLInputElement> ) => void\r\n}\r\n\r\nconst InputVisitorName = (props:PropsType) => {\r\n\r\n    return (\r\n        <div>\r\n            <div>Enter your name:</div>\r\n            <input\r\n                type=\"text\"\r\n                value={props.title}\r\n                onChange={props.onChangeHandler}\r\n                onKeyPress={props.onKeyPressHandler}\r\n                placeholder=\"Имя своё введи\"\r\n                className={styles.inputVisitorName}\r\n                //maxLength=\"25\"\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default InputVisitorName;","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\nimport styles from './Visitors.module.css'\nimport HelloVisitor from \"./HelloVisitor/HelloVisitor\";\nimport {v1} from \"uuid\";\nimport AllVisitors from \"./AllVisitors/AllVisitors\";\nimport InputVisitorName from \"./InputVisitorName/InputVisitorName\";\nimport {type} from \"os\";\n\ninterface IVisitor {\n    id: string,\n    title: string\n}\n\nconst Visitors = () => {\n\n    const defaultVisitors: IVisitor[] = []\n\n    const [visitors, setVisitors] = useState(defaultVisitors);\n\n    const [title, setTitle] = useState(\"\")\n\n    const zeroFirstFormat = (value: any) => {\n        if (value < 10) {\n            value = \"0\" + value;\n        }\n        return value;\n    }\n\n    const getTime = () => {\n        let date = new Date();\n        return `${zeroFirstFormat(date.getHours())}:${zeroFirstFormat(date.getMinutes())}`\n    }\n\n    const [timeAdded, setTimeAdded] = useState(getTime())\n\n    function addVisitor() {\n        if (title !== \"\") {\n            const visitor = {id: v1(), title: title}\n            const newVisitors = [visitor, ...visitors]\n            setVisitors(newVisitors)\n            setTimeAdded(getTime)\n            setTitle(\"\")\n        }\n    }\n\n\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (e.charCode === 13) {\n            addVisitor()\n        }\n    }\n\n    return (\n        <div className={styles.message}>\n            <div>\n                <InputVisitorName\n                    title={title}\n                    //switchButtonState={switchButtonState}\n                    onKeyPressHandler={onKeyPressHandler}\n                    //error={error}\n                    onChangeHandler={onChangeHandler}/>\n                <button onClick={addVisitor}>ADD</button>\n            </div>\n            {visitors.length ?\n                <div>\n                    <HelloVisitor\n                        title={visitors[setVisitors.length - 1] ? visitors[setVisitors.length - 1].title : \"\"}\n                        name=\"Saveliy\"\n                        timeAdded={visitors[setVisitors.length - 1] ? timeAdded : \"\"}\n                    />\n                    Посетители:\n                    <AllVisitors visitors={visitors}/>\n                </div>\n                :\n                <div>\n                    Посетители: нету\n                </div>\n            }\n        </div>\n    );\n}\n\nexport default Visitors;\n","import React, {useState} from 'react';\nimport MyName from \"./MyName/MyName\";\nimport styles from './Monday.module.css'\nimport Visitors from \"./Visitors/Visitors\";\n\nconst Monday = () => {\n\n  return (\n    <div className={styles.mainContainer}>\n        <MyName name=\"Biryukov Saveliy-Georgiy Yurievich\"/>\n        <Visitors/>\n    </div>\n  );\n}\n\nexport default Monday;\n","import React, {useState} from \"react\";\r\nimport styles from \"./TodoListHeader.module.css\";\r\n\r\ntype PropsType = {\r\n    addTask: (newText: string) => void\r\n}\r\n\r\nfunction TodoListHeader(props: PropsType) {\r\n\r\n    let [isDisabled, setIsDisabled] = useState(true)\r\n\r\n    let [error, setError] = useState(false)\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n\r\n    /*function switchButtonStatus () {\r\n        if (title === \"\") {\r\n            setIsDisabled(true)\r\n        } else {\r\n            setIsDisabled(false)\r\n        }\r\n    };*/\r\n\r\n    function onAddTaskClick () {\r\n        let newTitle = title;\r\n        title = \"\";\r\n        props.addTask(newTitle);\r\n        setIsDisabled(true);\r\n        setError(false);\r\n        setTitle(\"\");\r\n    }\r\n\r\n    function onAddTaskKeyPress (e: any) {\r\n        if (e.key === \"Enter\") {\r\n            onAddTaskClick();\r\n        }\r\n    }\r\n        // const {error} = this.state;\r\n        const inputClassname = error ? styles.error : styles.inputText;\r\n        return (\r\n            <div className={styles.TodoListHeader}>\r\n                <h3 className={styles.todoListHeaderTitle}>What to Learn</h3>\r\n                <div className={styles.todoListNewTaskForm}>\r\n                        <input\r\n                            //ref={this.newTaskTitleRef}\r\n                            type=\"text\"\r\n                            placeholder=\"New task name\"\r\n                            // onInput={}\r\n                            className={inputClassname}\r\n                            onKeyPress={onAddTaskKeyPress}\r\n                            value={title}\r\n                        />\r\n                    <button\r\n                        onClick={onAddTaskClick}\r\n                        disabled={isDisabled}\r\n                    >\r\n                        Add\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        );\r\n}\r\n\r\nexport default TodoListHeader;\r\n","import React, {useState} from \"react\";\r\nimport styles from \"./TodoListTask.module.css\";\r\nimport {FilterValuesType} from \"../../Tuesday\";\r\nimport { TaskType } from \"../TodoListTasks\";\r\n\r\ntype PropsType = {\r\n    task: TaskType\r\n    deleteTask: (taskId: number) => void\r\n}\r\n\r\nfunction TodoListTask (props: PropsType) {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n\r\n    //let [timeBlock, setTimeBlock] = useState(false)\r\n\r\n /*   function onIsDoneChanged (e:any) {\r\n        this.props.changeStatus(props.task.id, e.currentTarget.checked, props.task);\r\n    };*/\r\n\r\n   /* function onTitleChanged (e:any) {\r\n        props.changeTitle(props.task.id, e.currentTarget.value);\r\n    };*/\r\n\r\n    function deleteThisTask () {\r\n        props.deleteTask(props.task.id);\r\n    };\r\n\r\n  /*  function activateEditMode () {\r\n        setEditMode(true)\r\n    };\r\n*/\r\n    function deactivateEditMode () {\r\n        setEditMode(false)\r\n      //  setTimeBlock(false)\r\n    }\r\n\r\n    /*function showBlockTime () {\r\n        setTimeBlock(true)\r\n    }\r\n\r\n    function hideBlockTime () {\r\n        setTimeBlock(false)\r\n    }*/\r\n\r\n    /*function onPriorityChanged (e:any) {\r\n        props.changePriority(props.task.id, e.currentTarget.value);\r\n    }*/\r\n\r\n\r\n        const todoListTask = props.task.isDone === true ? styles.done : \"\";\r\n       // let blockTime = timeBlock === true ? styles.taskTime : styles.displayBlockNone;\r\n\r\n        return (\r\n            <div className={styles.todoListTask + \" \" + todoListTask}>\r\n                <div className={styles.taskWrap}>\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        checked={props.task.isDone}\r\n                       // onChange={onIsDoneChanged}\r\n                    />\r\n                    {editMode\r\n                        ? <input\r\n                            type=\"text\"\r\n                            value={props.task.title}\r\n                            autoFocus={true}\r\n                            onBlur={deactivateEditMode}\r\n                            //onChange={onTitleChanged}\r\n                        />\r\n                        :\r\n                        <div className={styles.wordWrap}\r\n                            /* onMouseOver={showBlockTime}\r\n                             onMouseOut={hideBlockTime}*/\r\n                             //onClick={this.activateEditMode}\r\n                        >\r\n                            {props.task.id}-{props.task.title}-priority:\r\n                        </div>\r\n                    }\r\n                    <div>\r\n                        <select\r\n                            className={styles.selector}\r\n                            //value={props.task.priority}\r\n                           // onChange={onPriorityChanged}\r\n                        >\r\n                            <option>high</option>\r\n                            <option>medium</option>\r\n                            <option>low</option>\r\n                        </select>\r\n                    </div>\r\n                    <button\r\n                        className={styles.deleteButton}\r\n                        onMouseDown={deleteThisTask}>\r\n                        X\r\n                    </button>\r\n                </div>\r\n                {/*<div className={blockTime}>\r\n                    <div>created:\r\n                        {props.task.timeAdded}\r\n                    </div>\r\n                    <div>updated:\r\n                        {props.task.timeUpdated}</div>\r\n                    <div>finished:\r\n                        {props.task.timeFinished}</div>\r\n                </div>*/}\r\n            </div>\r\n        );\r\n}\r\n\r\nexport default TodoListTask;\r\n","import React from \"react\";\r\nimport styles from \"./TodoListTasks.module.css\";\r\nimport TodoListTask from \"./TodoListTask/TodoListTask\";\r\n\r\nexport type TaskType = {\r\n    id: number,\r\n    title: string,\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    tasks: Array<TaskType>\r\n    deleteTask: (taskId: number) => void\r\n}\r\n\r\nfunction TodoListTasks(props: PropsType) {\r\n\r\n    let tasksElements = props.tasks.map((task, index) => {\r\n        return (\r\n            <TodoListTask\r\n                key={index}\r\n                task={task}\r\n                deleteTask={props.deleteTask}\r\n            />\r\n        )\r\n    });\r\n    return (\r\n        <div className={styles.todoListTask}>\r\n            {tasksElements}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TodoListTasks;","import React, {useState} from \"react\";\r\nimport styles from \"./TodoListFooter.module.css\";\r\nimport {FilterValuesType} from \"../Tuesday\";\r\n\r\ntype PropsType = {\r\n    changeFilter: (value: FilterValuesType) => void\r\n}\r\n\r\nfunction TodoListFooter(props: PropsType) {\r\n    let [isHidden, setIsHidden] = useState(false)\r\n\r\n    function onHideFiltersClick () {\r\n            setIsHidden(true);\r\n    }\r\n\r\n    function onShowFiltersClick () {\r\n        setIsHidden(false);\r\n    }\r\n\r\n        return (\r\n            <div className={styles.todoListFooter}>\r\n                {!isHidden && <div>\r\n                    <button onClick={() => {props.changeFilter(\"all\")}}>All</button>\r\n                    <button onClick={() => {props.changeFilter(\"active\")}}>Active</button>\r\n                    <button onClick={() => {props.changeFilter(\"completed\")}}>Completed</button>\r\n                </div>\r\n                }\r\n                {!isHidden && <span onClick={onHideFiltersClick}>hide</span>}\r\n                {isHidden && <span onClick={onShowFiltersClick}>show</span>}\r\n            </div>\r\n        );\r\n}\r\n\r\nexport default TodoListFooter;\r\n","import React, {useState} from \"react\";\r\nimport styles from \"./Tuesday.module.css\";\r\nimport TodoListHeader from \"./TodoListHeader/TodoListHeader\";\r\nimport TodoListTasks from \"./TodoListTasks/TodoListTasks\";\r\nimport TodoListFooter from \"./TodoListFooter/TodoListFooter\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\nfunction Tuesday () {\r\n\r\n    let [tasks, setTasks] = useState([\r\n        {id: 0, title: \"CSS\", isDone: true, priority: \"low\"},\r\n        {id: 1, title: \"JS\", isDone: true, priority: \"medium\"},\r\n        {id: 2, title: \"ReactJS\", isDone: false, priority: \"high\"},\r\n    ])\r\n\r\n    let [filterValue, setFilterValue] = useState<FilterValuesType>(\"all\")\r\n\r\n    let [taskId, setTaskId] = useState(2)\r\n\r\n    let tasksForTodolist = tasks;\r\n\r\n    if(filterValue===\"active\") {\r\n        tasksForTodolist = tasks.filter(t => t.isDone===false)\r\n    }\r\n    if(filterValue===\"completed\") {\r\n        tasksForTodolist = tasks.filter(t => t.isDone===true)\r\n    }\r\n\r\n    function addTask (newText: string) {\r\n\r\n        let newTask = {\r\n            id: taskId++,\r\n            title: newText,\r\n            isDone: false,\r\n            priority: \"high\",\r\n        };\r\n\r\n        //let newTasks = this.state.tasks.push(newTask);\r\n        let newTasks = [...tasks, newTask];\r\n        setTasks(newTasks) //????\r\n    }\r\n\r\n    function changeFilter(value: FilterValuesType) {\r\n        setFilterValue(value)\r\n    }\r\n\r\n    function deleteTask (removedId : number) {\r\n        let newTasks = tasks.filter(t => t.id !== removedId);\r\n        setTasks(newTasks)\r\n    }\r\n\r\n        return (\r\n            <div>\r\n                <div className={styles.todoList}>\r\n                    <TodoListHeader addTask={addTask}/>\r\n                    <TodoListTasks\r\n                        deleteTask={deleteTask}\r\n                        tasks={tasksForTodolist}\r\n                    />\r\n                    <TodoListFooter\r\n                        changeFilter={changeFilter}\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n}\r\n\r\nexport default Tuesday;\r\n","import React from 'react';\r\nimport styles from './NavLink.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {dayOfWeekType} from \"../Navbar\";\r\n\r\ntype PropsType = {\r\n    dayOfWeek: dayOfWeekType,\r\n    onClick: (e: any) => void\r\n}\r\n\r\nconst Navlink = (props: PropsType) => {\r\n    return (\r\n        <div className={styles.item}>\r\n            <NavLink to={props.dayOfWeek.link} activeClassName={styles.activeLink}\r\n                     onClick={props.onClick}>{props.dayOfWeek.title}</NavLink>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Navlink;","import React, {useState} from \"react\";\r\nimport styles from \"./Navbar.module.css\";\r\nimport Navlink from \"./Navlink/NavLink\";\r\n\r\nexport type dayOfWeekType = {\r\n    title: string,\r\n    link: string,\r\n    style: string\r\n}\r\n\r\ntype PropsType = {\r\n    daysOfWeek: Array<dayOfWeekType>\r\n}\r\n\r\nfunction Navbar(props: PropsType) {\r\n\r\n    let [activeLink, setActiveLink] = useState(\"\")\r\n\r\n    function activateLink (e: any) {\r\n        setActiveLink (e.currentTarget.textContent)\r\n    }\r\n\r\n        let NavLinks = props.daysOfWeek.map((dayOfWeek) => {\r\n            return (<Navlink\r\n                dayOfWeek={dayOfWeek}\r\n                onClick={activateLink}\r\n            />);\r\n        });\r\n        return (\r\n            <nav className={styles.nav}>\r\n                {NavLinks}\r\n            </nav>);\r\n}\r\n\r\nexport default Navbar;","import React, {useState} from 'react';\nimport './App.css';\nimport Monday from \"./components/Monday/Monday\";\nimport {HashRouter, Route} from \"react-router-dom\";\nimport Tuesday from \"./components/Tuesday/Tuesday\";\nimport Navbar from \"./components/Navbar/Navbar\";\n\nconst App = () => {\n\n    let [daysOfWeek, setDayOfWeek] = useState([\n            {title: \"monday\", link: \"/monday\", style: \"styles.activeLink\"},\n            {title: \"tuesday\", link: \"/tuesday\", style: \"styles.activeLink\"},\n        ]);\n\n  return (\n      <HashRouter>\n          <div className=\"App\">\n              <Navbar daysOfWeek={daysOfWeek}/>\n              <Route path=\"/monday\"\n                     render={() => <Monday/>}/>\n              <Route path=\"/tuesday\"\n                     render={() =>\n                         <Tuesday />}/>\n          </div>\n      </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}